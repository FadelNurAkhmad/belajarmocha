{
  "stats": {
    "suites": 5,
    "tests": 9,
    "passes": 5,
    "pending": 0,
    "failures": 4,
    "start": "2023-11-22T07:26:32.299Z",
    "end": "2023-11-22T07:26:37.615Z",
    "duration": 5316,
    "testsRegistered": 9,
    "passPercent": 55.55555555555556,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "630b66d6-bbca-4f56-8c48-041c1e5557ad",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0d06f761-fce3-4fcc-9171-2846220a19ad",
          "title": "Verify Delete User",
          "fullFile": "D:\\Jago QA\\batch20mocha\\test\\api-test\\delete.test.js",
          "file": "\\test\\api-test\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Delete User Berhasil",
              "fullTitle": "Verify Delete User 1. Delete User Berhasil",
              "timedOut": false,
              "duration": 736,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const responseLogin = await url\n  .post(\"/login\")\n  .send({ email: \"baraungkep1@gmail.com\", password: \"baraungkep\" });\nconst authToken = responseLogin.body.credentials.access_token;\nconst response = await url\n  .del(\"/delete-user\")\n  .set(\"Authorization\", `${authToken}`)\n  .send({ password: \"baraungkep\" });\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.body.data).to.eql(\"Sedih melihatmu pergi BaraUngkep\");\nexpect(response.body.message).to.eql(\"Berhasil Hapus User\");\nexpect(response.body.status).to.eql(\"SUCCESS_DELETE_PROFILE\");",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'access_token')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'access_token')\n    at Context.<anonymous> (test\\api-test\\delete.test.js:10:54)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3eef6fb8-4f67-4284-862e-8e8bdd884ce0",
              "parentUUID": "0d06f761-fce3-4fcc-9171-2846220a19ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2. Delete User Gagal",
              "fullTitle": "Verify Delete User 2. Delete User Gagal",
              "timedOut": false,
              "duration": 1002,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseLogin = await url\n  .post(\"/login\")\n  .send({ email: \"baraungkep2@gmail.com\", password: \"baraungkep\" });\nconst authToken = responseLogin.body.credentials.access_token;\nconst response = await url\n  .del(\"/delete-user\")\n  .set(\"Authorization\", `${authToken}`)\n  .send({ password: \"bara@ungkep\" });\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.body.data).to.eql(\"Nama tidak valid\");\nexpect(response.body.message).to.eql(\"Tidak boleh mengandung symbol\");\nexpect(response.body.status).to.eql(\"FAILED_DELETE_PROFILE\");",
              "err": {},
              "uuid": "313d3dbf-5124-4684-bd84-f8f0fa8a69a2",
              "parentUUID": "0d06f761-fce3-4fcc-9171-2846220a19ad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "313d3dbf-5124-4684-bd84-f8f0fa8a69a2"
          ],
          "failures": [
            "3eef6fb8-4f67-4284-862e-8e8bdd884ce0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1738,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "47480d61-f8d2-464d-b6ce-0386a40aaffe",
          "title": "Test Functional API Login",
          "fullFile": "D:\\Jago QA\\batch20mocha\\test\\api-test\\login.test.js",
          "file": "\\test\\api-test\\login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Success Login with valid email and password",
              "fullTitle": "Test Functional API Login Verify Success Login with valid email and password",
              "timedOut": false,
              "duration": 531,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//   let random_email = Math.random().toString(36).substring(7); // Membuat random kata\n// TEST CASE\nconst response = await request_url // INI BUAT NGARAH KE URL BARRU.PYTHONANYWHERE.COM\n  .post(\"/login\") // INI ENDPOINT SETELAH .COM\n  .send({ email: \"parjoraharjo@gmail.com\", password: \"parjoraharjo\" }); // INI SESUAI BODY\n// VALIDASI\nexpect(response.body.data).to.eql(\"Welcome Parjo Raharjo\");\nexpect(response.body.status).to.eql(\"SUCCESS_LOGIN\");\nexpect(response.body.message).to.eql(\"Anda Berhasil Login\");",
              "err": {
                "message": "AssertionError: expected 'Welcome parjo' to deeply equal 'Welcome Parjo Raharjo'",
                "estack": "AssertionError: expected 'Welcome parjo' to deeply equal 'Welcome Parjo Raharjo'\n    at Context.<anonymous> (test\\api-test\\login.test.js:15:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Welcome parjo\n+ Welcome Parjo Raharjo\n"
              },
              "uuid": "a1d636f5-2125-4ba5-9635-41d64d1868ff",
              "parentUUID": "47480d61-f8d2-464d-b6ce-0386a40aaffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Login with invalid email and password",
              "fullTitle": "Test Functional API Login Verify Failed Login with invalid email and password",
              "timedOut": false,
              "duration": 470,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TEST CASE\nconst response = await request_url // INI BUAT NGARAH KE URL BARRU.PYTHONANYWHERE.COM\n  .post(\"/login\") // INI ENDPOINT SETELAH .COM\n  .send({\n    email: \"contohbatch19cobagagal@gmail.com\",\n    password: \"jokotampan900\",\n  }); // INI SESUAI BODY\n// VALIDASI\nexpect(response.body.data).to.eql(\"Cek Formulir Anda\");\nexpect(response.body.status).to.eql(\"FAILED_LOGIN\");\nexpect(response.body.message).to.eql(\n  \"Email/Password melebihin maksimal karakter\"\n);",
              "err": {},
              "uuid": "28e3acbe-92d1-42f8-9cda-b2e5f923bd03",
              "parentUUID": "47480d61-f8d2-464d-b6ce-0386a40aaffe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "28e3acbe-92d1-42f8-9cda-b2e5f923bd03"
          ],
          "failures": [
            "a1d636f5-2125-4ba5-9635-41d64d1868ff"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1001,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e5d30e2a-58c9-433f-8311-35aa87cb89c5",
          "title": "Scenario Register Feature",
          "fullFile": "D:\\Jago QA\\batch20mocha\\test\\api-test\\register.test.js",
          "file": "\\test\\api-test\\register.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Failed Register With Duplicate Email Address",
              "fullTitle": "Scenario Register Feature 1. Verifying Failed Register With Duplicate Email Address",
              "timedOut": false,
              "duration": 495,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/register\")\n  .send({ email: \"coba@gmail.com\", password: \"coba\", name: \"rina\" });\nexpect(response.body.status).to.eql(\"FAILED_REGISTER\");\nexpect(response.body.data).to.eql(\n  \"Email sudah terdaftar, gunakan Email lain\"\n);\nexpect(response.body.message).to.eql(\"Gagal Registrasi\");\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.statusCode).to.eql(420);",
              "err": {},
              "uuid": "df76b1ec-a3fc-4515-81eb-c357c49b7d29",
              "parentUUID": "e5d30e2a-58c9-433f-8311-35aa87cb89c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2. Verifying Success Register",
              "fullTitle": "Scenario Register Feature 2. Verifying Success Register",
              "timedOut": false,
              "duration": 506,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain.post(\"/register\").send({\n  email: \"momotaro@gmail.com\",\n  password: \"rahasia\",\n  name: \"momotaro\",\n});\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.body.data).to.eql(\"berhasil\");\nexpect(response.body.message).to.eql(\"created user!\");\nexpect(response.body.status).to.eql(\"SUCCESS_REGISTER\");",
              "err": {
                "message": "AssertionError: expected 'Email sudah terdaftar, gunakan Email …' to deeply equal 'berhasil'",
                "estack": "AssertionError: expected 'Email sudah terdaftar, gunakan Email …' to deeply equal 'berhasil'\n    at Context.<anonymous> (test\\api-test\\register.test.js:27:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Email sudah terdaftar, gunakan Email lain\n+ berhasil\n"
              },
              "uuid": "60f99fb8-947c-40bb-928d-3d5d2c34f13a",
              "parentUUID": "e5d30e2a-58c9-433f-8311-35aa87cb89c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3. Verifying Success Register With Random Email Address",
              "fullTitle": "Scenario Register Feature 3. Verifying Success Register With Random Email Address",
              "timedOut": false,
              "duration": 497,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await domain.post(\"/register\").send({\n  email: random_email + \"@gmail.com\",\n  password: random_email,\n  name: random_email,\n});\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.body.data).to.eql(\"berhasil\");\nexpect(response.body.message).to.eql(\"created user!\");\nexpect(response.body.status).to.eql(\"SUCCESS_REGISTER\");",
              "err": {},
              "uuid": "e565dc37-b31c-473e-811a-679fe54aa5fe",
              "parentUUID": "e5d30e2a-58c9-433f-8311-35aa87cb89c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df76b1ec-a3fc-4515-81eb-c357c49b7d29",
            "e565dc37-b31c-473e-811a-679fe54aa5fe"
          ],
          "failures": [
            "60f99fb8-947c-40bb-928d-3d5d2c34f13a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1498,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "88e3c758-c694-4f33-8bbe-65d4ea5c8747",
          "title": "Scenario Update Profile Feature",
          "fullFile": "D:\\Jago QA\\batch20mocha\\test\\api-test\\update_profile.test.js",
          "file": "\\test\\api-test\\update_profile.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Success Update Profile",
              "fullTitle": "Scenario Update Profile Feature 1. Verifying Success Update Profile",
              "timedOut": false,
              "duration": 519,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const responseLogin = await domain\n  .post(\"/login\")\n  .send({ email: \"jokotampan900@gmail.com\", password: \"jokotampan900\" });\nconst authToken = responseLogin.body.credentials.access_token;\nconst response = await domain\n  .put(\"/update-profile\")\n  .set(\"Authorization\", `${authToken}`)\n  .send({ name: \"argavi\" });\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.body.data).to.eql(\"Username Anda menjadi argavi\");\nexpect(response.body.message).to.eql(\"Berhasil Perbarui Profile\");\nexpect(response.body.status).to.eql(\"SUCCESS_UPDATE_PROFILE\");",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'access_token')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'access_token')\n    at Context.<anonymous> (test\\api-test\\update_profile.test.js:10:54)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "284ec8ae-e91e-4023-b91d-c33e87f30749",
              "parentUUID": "88e3c758-c694-4f33-8bbe-65d4ea5c8747",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "284ec8ae-e91e-4023-b91d-c33e87f30749"
          ],
          "pending": [],
          "skipped": [],
          "duration": 519,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "93b02a88-f011-4193-a1f0-f203d70867ae",
          "title": "Scenario List User Feature",
          "fullFile": "D:\\Jago QA\\batch20mocha\\test\\api-test\\user_list.test.js",
          "file": "\\test\\api-test\\user_list.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Success Get List User",
              "fullTitle": "Scenario List User Feature 1. Verifying Success Get List User",
              "timedOut": false,
              "duration": 538,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = \"jokotampan900@gmail.com\";\nconst response = await domain.get(\"/list-user\").query({ email });\nexpect(response.body.status).to.eql(\"SUCCESS_USER_LIST\");\nexpect(response.body.message).to.eql(\"List of registered users\");\nexpect(response.body).to.include.keys(\n  \"data\",\n  \"message\",\n  \"pagination\",\n  \"status\"\n);",
              "err": {},
              "uuid": "b71a2417-ce75-4e55-861f-24d1d2dec2f3",
              "parentUUID": "93b02a88-f011-4193-a1f0-f203d70867ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b71a2417-ce75-4e55-861f-24d1d2dec2f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 538,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}